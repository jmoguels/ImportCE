name: Copado Import Component List Generator

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:  # Allow manual trigger

jobs:
  generate-component-list:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Fetch all history to properly identify changed files

      - name: Get changed files
        id: changed-files
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests, get files changed between PR base and head
            echo "Getting changed files in PR"
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          else
            # For workflow_dispatch, get all files in the repo
            echo "Getting all files in repo"
            CHANGED_FILES=$(find . -type f -not -path "*/\.*" | sed 's/^\.\///')
          fi
          echo "$CHANGED_FILES" > changed_files.txt
          cat changed_files.txt

      - name: Generate Copado Import List
        id: generate-import-list
        run: |
          # Create output file
          touch copado_import_list.txt
          
          # Process each file and convert to Copado format
          while IFS= read -r file; do
            # Skip if file is empty or just whitespace
            if [[ -z "${file// }" ]]; then
              continue
            fi
            
            # Extract component information from the path
            if [[ $file == force-app/main/default/* ]]; then
              # SFDX format handling
              path_without_prefix=${file#force-app/main/default/}
              
              # Handle different metadata types
              if [[ $path_without_prefix == classes/* ]]; then
                if [[ $path_without_prefix == *.cls ]]; then
                  name=${path_without_prefix#classes/}
                  name=${name%.cls}
                  echo "ApexClass/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == triggers/* ]]; then
                if [[ $path_without_prefix == *.trigger ]]; then
                  name=${path_without_prefix#triggers/}
                  name=${name%.trigger}
                  echo "ApexTrigger/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == pages/* ]]; then
                if [[ $path_without_prefix == *.page ]]; then
                  name=${path_without_prefix#pages/}
                  name=${name%.page}
                  echo "ApexPage/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == components/* ]]; then
                if [[ $path_without_prefix == *.component ]]; then
                  name=${path_without_prefix#components/}
                  name=${name%.component}
                  echo "ApexComponent/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == lwc/* ]]; then
                # LWC components are in directories
                dir=$(dirname "$path_without_prefix")
                if [[ $dir != "lwc" ]]; then
                  component_name=${dir#lwc/}
                  # Only add once per component
                  if [[ $path_without_prefix == *"$component_name/$component_name.js" ]]; then
                    echo "LightningComponentBundle/$component_name" >> copado_import_list.txt
                  fi
                fi
              elif [[ $path_without_prefix == aura/* ]]; then
                # Aura components are in directories
                dir=$(dirname "$path_without_prefix")
                if [[ $dir != "aura" ]]; then
                  component_name=${dir#aura/}
                  # Only add once per component
                  if [[ $path_without_prefix == *"$component_name/$component_name.cmp" ]]; then
                    echo "AuraDefinitionBundle/$component_name" >> copado_import_list.txt
                  fi
                fi
              elif [[ $path_without_prefix == objects/* ]]; then
                if [[ $path_without_prefix == *.object-meta.xml ]]; then
                  name=${path_without_prefix#objects/}
                  name=${name%.object-meta.xml}
                  echo "CustomObject/$name" >> copado_import_list.txt
                elif [[ $path_without_prefix == */fields/*.field-meta.xml ]]; then
                  obj_name=$(echo $path_without_prefix | awk -F/ '{print $2}')
                  field_name=$(basename $path_without_prefix .field-meta.xml)
                  echo "CustomField/$obj_name.$field_name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == customMetadata/* ]]; then
                if [[ $path_without_prefix == *.md-meta.xml ]]; then
                  file_name=$(basename $path_without_prefix .md-meta.xml)
                  md_type=$(dirname $path_without_prefix | sed 's/customMetadata\///')
                  echo "CustomMetadata/$md_type.$file_name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == layouts/* ]]; then
                if [[ $path_without_prefix == *.layout-meta.xml ]]; then
                  name=${path_without_prefix#layouts/}
                  name=${name%.layout-meta.xml}
                  echo "Layout/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == flows/* ]]; then
                if [[ $path_without_prefix == *.flow-meta.xml ]]; then
                  name=${path_without_prefix#flows/}
                  name=${name%.flow-meta.xml}
                  echo "Flow/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == permissionsets/* ]]; then
                if [[ $path_without_prefix == *.permissionset-meta.xml ]]; then
                  name=${path_without_prefix#permissionsets/}
                  name=${name%.permissionset-meta.xml}
                  echo "PermissionSet/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == profiles/* ]]; then
                if [[ $path_without_prefix == *.profile-meta.xml ]]; then
                  name=${path_without_prefix#profiles/}
                  name=${name%.profile-meta.xml}
                  echo "Profile/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == reports/* ]]; then
                if [[ $path_without_prefix == *.report-meta.xml ]]; then
                  folder=$(dirname "$path_without_prefix" | sed 's/reports\///')
                  report=$(basename "$path_without_prefix" .report-meta.xml)
                  if [[ $folder == "reports" ]]; then
                    echo "Report/$report" >> copado_import_list.txt
                  else
                    echo "Report/$folder/$report" >> copado_import_list.txt
                  fi
                fi
              elif [[ $path_without_prefix == dashboards/* ]]; then
                if [[ $path_without_prefix == *.dashboard-meta.xml ]]; then
                  folder=$(dirname "$path_without_prefix" | sed 's/dashboards\///')
                  dashboard=$(basename "$path_without_prefix" .dashboard-meta.xml)
                  if [[ $folder == "dashboards" ]]; then
                    echo "Dashboard/$dashboard" >> copado_import_list.txt
                  else
                    echo "Dashboard/$folder/$dashboard" >> copado_import_list.txt
                  fi
                fi
              elif [[ $path_without_prefix == staticresources/* ]]; then
                if [[ $path_without_prefix == *.resource-meta.xml ]]; then
                  name=${path_without_prefix#staticresources/}
                  name=${name%.resource-meta.xml}
                  echo "StaticResource/$name" >> copado_import_list.txt
                fi
              fi
              
            elif [[ $file == src/* ]]; then
              # Handle classic format
              path_without_prefix=${file#src/}
              
              # Handle different metadata types based on classic format
              if [[ $path_without_prefix == classes/* ]]; then
                if [[ $path_without_prefix == *.cls ]]; then
                  name=${path_without_prefix#classes/}
                  name=${name%.cls}
                  echo "ApexClass/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == triggers/* ]]; then
                if [[ $path_without_prefix == *.trigger ]]; then
                  name=${path_without_prefix#triggers/}
                  name=${name%.trigger}
                  echo "ApexTrigger/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == pages/* ]]; then
                if [[ $path_without_prefix == *.page ]]; then
                  name=${path_without_prefix#pages/}
                  name=${name%.page}
                  echo "ApexPage/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == components/* ]]; then
                if [[ $path_without_prefix == *.component ]]; then
                  name=${path_without_prefix#components/}
                  name=${name%.component}
                  echo "ApexComponent/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == objects/* ]]; then
                if [[ $path_without_prefix == *.object ]]; then
                  name=${path_without_prefix#objects/}
                  name=${name%.object}
                  echo "CustomObject/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == layouts/* ]]; then
                if [[ $path_without_prefix == *.layout ]]; then
                  name=${path_without_prefix#layouts/}
                  name=${name%.layout}
                  echo "Layout/$name" >> copado_import_list.txt
                fi
              elif [[ $path_without_prefix == profiles/* ]]; then
                if [[ $path_without_prefix == *.profile ]]; then
                  name=${path_without_prefix#profiles/}
                  name=${name%.profile}
                  echo "Profile/$name" >> copado_import_list.txt
                fi
              fi
            fi
          done < changed_files.txt
          
          # Remove duplicates
          sort copado_import_list.txt | uniq > copado_import_list_unique.txt
          mv copado_import_list_unique.txt copado_import_list.txt
          
          # Display the result
          echo "Generated Copado Import List:"
          cat copado_import_list.txt
          
          # Set the result as output
          COPADO_LIST=$(cat copado_import_list.txt)
          echo "copado-list=$COPADO_LIST" >> $GITHUB_OUTPUT

      # Skip artifact upload for now as it's causing errors
      # Instead, just save the file and focus on PR comment
      - name: Save component list for PR comment
        run: |
          mkdir -p ./artifacts
          cp copado_import_list.txt ./artifacts/
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        run: |
          # Read the component list file
          COMPONENT_LIST=$(cat copado_import_list.txt)
          
          # Create the comment body
          COMMENT_BODY="## Copado Import Component List\n\nThis list can be copied and pasted into Copado Essentials' \"Import Component Selections\" feature:\n\n\`\`\`\n$COMPONENT_LIST\n\`\`\`\n\nYou can access this in Copado by navigating to More > Import Component Selections"
          
          # Use the GitHub REST API to post the comment
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
